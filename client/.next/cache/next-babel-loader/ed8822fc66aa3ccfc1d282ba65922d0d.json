{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect } from \"react\";\nimport { ArticleContext } from \"./articleContext\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { getArticlesQuery } from \"../queries/articleQueries\";\nimport { authUserQuery } from \"../queries/authQueries\";\nimport { AuthContext } from \"./authContext\";\n\nconst ContextWrapper = ({\n  children,\n  contextData\n}) => {\n  const {\n    dispatch: articleDispatch\n  } = useContext(ArticleContext);\n  const {\n    dispatch: authDispatch\n  } = useContext(AuthContext);\n  const {\n    refetch: getArticles\n  } = useQuery(getArticlesQuery, {\n    skip: true\n  });\n  const {\n    refetch: authUser\n  } = useQuery(authUserQuery, {\n    skip: true\n  }); // Get all articles\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await getArticles();\n        articleDispatch({\n          type: \"GET_ARTICLES\",\n          payload: data.articles\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData();\n  }, []); // Check if local storage has token and try to auth\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (localStorage.getItem(\"token\")) {\n        try {\n          const {\n            data\n          } = await authUser({\n            token: localStorage.getItem(\"token\")\n          });\n          authDispatch({\n            type: \"AUTH_SUCCESS\",\n            payload: data.authUser\n          });\n        } catch (err) {\n          console.log(`Initial auth error: ${err}`);\n        }\n      }\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(React.Fragment, null, children);\n};\n\nexport default ContextWrapper;","map":{"version":3,"sources":["C:/SandBox/next-articles/client/context/contextWrapper.js"],"names":["React","useContext","useEffect","ArticleContext","useQuery","getArticlesQuery","authUserQuery","AuthContext","ContextWrapper","children","contextData","dispatch","articleDispatch","authDispatch","refetch","getArticles","skip","authUser","fetchData","data","type","payload","articles","err","console","log","localStorage","getItem","token"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA+B;AACpD,QAAM;AAAEC,IAAAA,QAAQ,EAAEC;AAAZ,MAAgCX,UAAU,CAACE,cAAD,CAAhD;AACA,QAAM;AAAEQ,IAAAA,QAAQ,EAAEE;AAAZ,MAA6BZ,UAAU,CAACM,WAAD,CAA7C;AACA,QAAM;AAAEO,IAAAA,OAAO,EAAEC;AAAX,MAA2BX,QAAQ,CAACC,gBAAD,EAAmB;AAAEW,IAAAA,IAAI,EAAE;AAAR,GAAnB,CAAzC;AACA,QAAM;AAAEF,IAAAA,OAAO,EAAEG;AAAX,MAAwBb,QAAQ,CAACE,aAAD,EAAgB;AAAEU,IAAAA,IAAI,EAAE;AAAR,GAAhB,CAAtC,CAJoD,CAMpD;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMJ,WAAW,EAAlC;AACAH,QAAAA,eAAe,CAAC;AAAEQ,UAAAA,IAAI,EAAE,cAAR;AAAwBC,UAAAA,OAAO,EAAEF,IAAI,CAACG;AAAtC,SAAD,CAAf;AACD,OAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KAPD;;AAQAL,IAAAA,SAAS;AACV,GAVQ,EAUN,EAVM,CAAT,CAPoD,CAmBpD;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAG,YAAY;AAC5B,UAAIQ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjC,YAAI;AACF,gBAAM;AAAER,YAAAA;AAAF,cAAW,MAAMF,QAAQ,CAAC;AAC9BW,YAAAA,KAAK,EAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB;AADuB,WAAD,CAA/B;AAIAd,UAAAA,YAAY,CAAC;AAAEO,YAAAA,IAAI,EAAE,cAAR;AAAwBC,YAAAA,OAAO,EAAEF,IAAI,CAACF;AAAtC,WAAD,CAAZ;AACD,SAND,CAME,OAAOM,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBF,GAAI,EAAvC;AACD;AACF;AACF,KAZD;;AAaAL,IAAAA,SAAS;AACV,GAfQ,EAeN,EAfM,CAAT;AAiBA,SAAO,4BAAGT,QAAH,CAAP;AACD,CAtCD;;AAwCA,eAAeD,cAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { ArticleContext } from \"./articleContext\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { getArticlesQuery } from \"../queries/articleQueries\";\r\nimport { authUserQuery } from \"../queries/authQueries\";\r\nimport { AuthContext } from \"./authContext\";\r\n\r\nconst ContextWrapper = ({ children, contextData }) => {\r\n  const { dispatch: articleDispatch } = useContext(ArticleContext);\r\n  const { dispatch: authDispatch } = useContext(AuthContext);\r\n  const { refetch: getArticles } = useQuery(getArticlesQuery, { skip: true });\r\n  const { refetch: authUser } = useQuery(authUserQuery, { skip: true });\r\n\r\n  // Get all articles\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data } = await getArticles();\r\n        articleDispatch({ type: \"GET_ARTICLES\", payload: data.articles });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Check if local storage has token and try to auth\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (localStorage.getItem(\"token\")) {\r\n        try {\r\n          const { data } = await authUser({\r\n            token: localStorage.getItem(\"token\")\r\n          });\r\n\r\n          authDispatch({ type: \"AUTH_SUCCESS\", payload: data.authUser });\r\n        } catch (err) {\r\n          console.log(`Initial auth error: ${err}`);\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default ContextWrapper;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useEffect } from \"react\";\nimport { ArticleContext } from \"./articleContext\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { getArticlesQuery } from \"../queries/articleQueries\";\nimport { authUserQuery } from \"../queries/authQueries\";\nimport { AuthContext } from \"./authContext\";\n\nconst ContextWrapper = ({\n  children,\n  contextData\n}) => {\n  const {\n    dispatch: articleDispatch\n  } = useContext(ArticleContext);\n  const {\n    dispatch: authDispatch\n  } = useContext(AuthContext);\n  const {\n    refetch: getArticles\n  } = useQuery(getArticlesQuery, {\n    skip: true\n  });\n  const {\n    refetch: authUser\n  } = useQuery(authUserQuery, {\n    skip: true\n  }); // Get all articles\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await getArticles();\n        articleDispatch({\n          type: \"GET_ARTICLES\",\n          payload: data.articles\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData();\n  }, []); // Check if local storage has token and try to auth\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (localStorage.getItem(\"token\")) {\n        try {\n          const {\n            data\n          } = await authUser({\n            token: localStorage.getItem(\"token\")\n          });\n          authDispatch({\n            type: \"AUTH_SUCCESS\",\n            payload: data.authUser\n          });\n        } catch (err) {\n          console.log(`Initial auth error: ${err}`);\n        }\n      }\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(React.Fragment, null, children);\n};\n\nexport default ContextWrapper;","map":null,"metadata":{},"sourceType":"module"}
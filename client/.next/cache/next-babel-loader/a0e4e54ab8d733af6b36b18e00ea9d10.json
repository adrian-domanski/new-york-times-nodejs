{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($email: String!, $password: String!) {\\n    register(email: $email, password: $password) {\\n      user {\\n        email\\n        id\\n      }\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query($token: String!) {\\n    authUser(token: $token) {\\n      email\\n      password\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($email: String!, $password: String!) {\\n    login(email: $email, password: $password) {\\n      user {\\n        id\\n        email\\n      }\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nexport var loginQuery = gql(_templateObject());\nexport var authUserQuery = gql(_templateObject2());\nexport var registerMutation = gql(_templateObject3());","map":{"version":3,"sources":["C:/SandBox/next-articles/client/queries/authQueries.js"],"names":["gql","loginQuery","authUserQuery","registerMutation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,IAAMC,UAAU,GAAGD,GAAH,mBAAhB;AAYP,OAAO,IAAME,aAAa,GAAGF,GAAH,oBAAnB;AAUP,OAAO,IAAMG,gBAAgB,GAAGH,GAAH,oBAAtB","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const loginQuery = gql`\r\n  query($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      user {\r\n        id\r\n        email\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const authUserQuery = gql`\r\n  query($token: String!) {\r\n    authUser(token: $token) {\r\n      email\r\n      password\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const registerMutation = gql`\r\n  mutation($email: String!, $password: String!) {\r\n    register(email: $email, password: $password) {\r\n      user {\r\n        email\r\n        id\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}